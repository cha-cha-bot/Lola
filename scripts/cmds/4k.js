const axios = require('axios');
const fs = require('fs');
const path = require('path');

let attemptCounter = {};  // Suivi du nombre de tentatives par utilisateur

module.exports.config = {
    name: "4k",
    version: "1.0.0",
    author: "Priyanshi Kaur",
    countDown: 5,
    role: 0,
    shortDescription: "Upscale an image",
    longDescription: "Upscale an image to higher resolution",
    category: "image",
    guide: {
        en: "{pn} [Reply to an image]"
    }
};

module.exports.onStart = async function ({ api, event, message }) {
    const { messageReply, threadID, messageID, senderID } = event;

    // Initialisation du compteur de tentatives
    attemptCounter[senderID] = attemptCounter[senderID] || 0;
    attemptCounter[senderID]++;

    // Tableau de messages al√©atoires
    const randomMessages = {
        noImage: [
            "Tu sais que je suis un bot, hein ?üòí R√©ponds avec une image, s'il te pla√Æt !üò§",
            "Encore cette histoire d'image üôÑ, vraiment ? T'as oubli√© comment √ßa marche ? ü§®",
            "Allez, t‚Äôas encore √©chou√©‚Ä¶üòë Une image, c‚Äôest pas sorcier üôÑ",
            "O√π est l'image ducon ? üòê",
            "Bon, s√©rieusement, l‚Äôimage c‚Äôest quoi le probl√®me l√† ? üòê Une image üòë"
        ],
        notImage: [
            "Je t'ai dit une image, pas √ßa‚Ä¶ J'esp√®re que tu me prends pas pour un idiot üòë",
            "T‚Äôas vraiment cru que c‚Äô√©tait une image ? Essaye encore, √ßa ira mieux üèåÔ∏è",
            "Mais t‚Äôes s√©rieux l√† ? C‚Äôest une image que je veux, pas ton chef-d'≈ìuvre de maternelle üòë",
            "Franchement, je pourrais faire un dessin pour toi, mais je pr√©f√®re que tu essaies de trouver une vraie image üòí",
            "T'es s√©rieux üòê"
        ],
        multipleAttempts: [
            "T‚Äôes t√™tu, hein ? Tu veux vraiment pas me laisser tranquille ? üòí",
            "Franchement, √ßa commence √† me fatiguer. Tu veux une m√©daille pour ta pers√©v√©rance ?üòë",
            "Encore des tentatives ? Tu me prends pour un d√©fi ? üôÑ",
            "√Ä ce rythme, tu vas battre un record du monde d‚Äôerreurs, bravo üèåÔ∏è",
            "Le nul, laisse tomber stp üòÇü§£üòÇ"
        ],
        error: [
            "Oups, ton image est tellement d√©form√©e qu'elle m'a fait buguer. Bien jou√© ! üòë",
            "Ta derni√®re image √©tait si mauvaise que j‚Äôai failli perdre la connexion ü§ß",
            "Franchement, ton image m‚Äôa fait douter de l‚Äôintelligence artificielle. Essaie encore üòê",
            "C'est pas une erreur de ma part, c‚Äôest juste que ton image √©tait trop moche üèåÔ∏è",
            "Bon, on dirait que m√™me mon syst√®me a des limites ü§ß Essaie de m'envoyer quelque chose de potable üòê"
        ],
        processing: [
            "‚åõ Je suis en train de transformer ton image‚Ä¶ √áa va √™tre √©pique !",
            "‚è≥ J'ai commenc√© √† bosser sur ton image, pr√©pare-toi √† √™tre √©bloui !",
            "üé® Je travaille sur ton image... √áa va √™tre plus beau qu'un coucher de soleil !",
            "üî® Transformation en cours‚Ä¶ Une ≈ìuvre d'art va na√Ætre sous tes yeux !"
        ],
        finished: [
            "‚ú® Mission accomplie, ton image a √©t√© upscal√©e avec brio !",
            "üéâ C'est fait ! Ton image a pris une nouvelle dimension !",
            "üé® Voil√† ! Ton image a √©t√© magnifi√©e, tu peux maintenant en √™tre fier !",
            "üåü Et voil√† le travail ! L'image est pr√™te √† briller en 4K."
        ]
    };

    // V√©rifier si l'utilisateur a r√©pondu avec une image
    if (!messageReply || !messageReply.attachments || !messageReply.attachments[0]) {
        if (attemptCounter[senderID] > 3) {
            return message.reply(randomMessages.noImage[Math.floor(Math.random() * randomMessages.noImage.length)]);
        }
        return message.reply("R√©ponds √† une image, pas √† ta vie, merci.");
    }

    const attachment = messageReply.attachments[0];
    if (attachment.type !== "photo") {
        if (attemptCounter[senderID] > 3) {
            return message.reply(randomMessages.notImage[Math.floor(Math.random() * randomMessages.notImage.length)]);
        }
        return message.reply("Je t‚Äôai dit, c‚Äôest une image que je veux, pas ton art abstrait.");
    }

    // Si l'image est valide, on continue avec le traitement
    try {
        const apiKey = "YOUR_API_KEY"; // Remplace par ta vraie cl√© API
        message.reply(randomMessages.processing[Math.floor(Math.random() * randomMessages.processing.length)]);

        const response = await axios({
            method: 'get',
            url: `https://for-devs.onrender.com/api/upscale`,
            params: {
                imageurl: attachment.url,
                apikey: apiKey
            },
            responseType: 'arraybuffer'
        });

        const tempFilePath = path.join(__dirname, "temp", `upscaled_${Date.now()}.png`);
        
        // Cr√©er le r√©pertoire "temp" s'il n'existe pas
        if (!fs.existsSync(path.join(__dirname, "temp"))) {
            fs.mkdirSync(path.join(__dirname, "temp"));
        }

        // Sauvegarder l'image dans le r√©pertoire temporaire
        fs.writeFileSync(tempFilePath, Buffer.from(response.data));

        // Envoyer l'image upscal√©e √† l'utilisateur
        await api.sendMessage(
            {
                attachment: fs.createReadStream(tempFilePath),
                body: randomMessages.finished[Math.floor(Math.random() * randomMessages.finished.length)]
            },
            threadID,
            () => fs.unlinkSync(tempFilePath) // Nettoyer le fichier temporaire apr√®s envoi
        );

    } catch (error) {
        console.error(error);
        return message.reply(randomMessages.error[Math.floor(Math.random() * randomMessages.error.length)]);
    }
};
